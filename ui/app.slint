import { Switch, Palette, Button, LineEdit, ProgressIndicator, Spinner } from "std-widgets.slint";

export enum AESMode {
    Undefined,
    Encryption,
    Decryption
}

export component PasswordChecker {
    in-out property<string> passphrase: "";
    in-out property<bool> is-strong: false;
    callback validate(string);

    HorizontalLayout {
        spacing: 10px;

        LineEdit {
            width: 70%;
            text: passphrase;
            changed text => {
                root.passphrase = self.text;
                root.validate(self.text);
            }
        }

        Text {
            text: is-strong ? "Strong passphrase" : "Weak passphrase";
            color: is-strong ? green : red;
            vertical-alignment: center;
            horizontal-alignment: center;

            animate color {
                duration: 500ms;
                easing: ease-in-out;
            }
        }
    }
}

export component App inherits Window {
    default-font-size: 20px;
    title: "File encryption system";
    callback pick-files;
    callback pick-directory;
    callback check-passphrase(string);
    callback apply-cipher([string], string, string, AESMode);
    in-out property<[string]> files;
    in-out property<string> directory;
    in-out property<AESMode> mode: AESMode.Undefined;
    in-out property<bool> strong-passphrase: false;

    callback enter-passphrase(string);
    enter-passphrase(passphrase) => {
        password-checker.passphrase = passphrase;
    }

    callback confirm-applying;
    confirm-applying => {
        confirm-button.clicked();
    }

    callback restart-applying;
    restart-applying => {
        restarting-button.clicked();
    }

    Switch {
        x: parent.width - self.width - 10px;
        y: 10px;
        text: "Dark mode";
        checked: Palette.color-scheme == ColorScheme.dark;
        toggled => {
            Palette.color-scheme = self.checked ? ColorScheme.dark : ColorScheme.light;
        }
    }

    Rectangle {

        Button {
            visible: files.length == 0;
            text: "Pick files";
            x: (parent.width - self.width) * 0.5;
            y: (parent.height - self.height) * 0.5;
            clicked => {
                root.pick-files();
            }
        }

        Button {
            visible: files.length != 0 && mode == AESMode.Undefined && directory == "";
            text: "Encrypt files";
            x: (parent.width - self.width) * 0.25;
            y: (parent.height - self.height) * 0.5;
            clicked => {
                root.mode = AESMode.Encryption;
                confirm-button.text = "Confirm encrypting files";
                confirm-button.is-applying = true;
            }
        }

        Button {
            visible: files.length != 0 && mode == AESMode.Undefined && directory == "";
            text: "Decrypt files";
            x: (parent.width - self.width) * 0.75;
            y: (parent.height - self.height) * 0.5;
            clicked => {
                root.mode = AESMode.Decryption;
                confirm-button.text = "Confirm decrypting files";
                confirm-button.is-applying = true;
            }
        }

        password-checker := PasswordChecker {
            visible: files.length != 0 && mode != AESMode.Undefined;
            width: parent.width * 0.5;
            height: 40px;
            x: (parent.width - self.width) * 0.5;
            y: (parent.height - self.height) * 0.35;
            passphrase: "";
            is-strong <=> root.strong-passphrase;
            validate(passphrase) => {
                root.check-passphrase(passphrase);
            }
        }

        directory-picker := Button {
            visible: files.length != 0 && mode != AESMode.Undefined;
            enabled: directory == "";
            text: self.enabled ? "Choose a directory" : "Directory has been picked";
            x: (parent.width - self.width) * 0.5;
            y: (parent.height - self.height) * 0.65;
            clicked => {
                root.pick-directory();
            }
        }

        confirm-button := Button {
            visible: files.length != 0 && is-applying;
            enabled: strong-passphrase && directory != "";
            x: (parent.width - self.width) * 0.5;
            y: (parent.height - self.height) * 0.8;
            in-out property<bool> is-applying: false;
            clicked => {
                if (root.mode == AESMode.Encryption) {
                    self.text = "Encrypting files...";
                } else if (root.mode == AESMode.Decryption) {
                    self.text = "Decrypting files...";
                }

                root.apply-cipher(root.files, password-checker.passphrase, root.directory, root.mode);

                progress.visible = true;

                if (root.mode == AESMode.Encryption) {
                    self.text = "File encryption has been done!";
                } else if (root.mode == AESMode.Decryption) {
                    self.text = "File decryption has been done!";
                }

                password-checker.passphrase = "";
                root.mode = AESMode.Undefined;
                root.strong-passphrase = false;
                progress.visible = false;
                restarting-button.visible = true;
            }
        }

        restarting-button := Button {
            visible: false;
            text: "Start again";
            x: (parent.width - self.width) * 0.5;
            y: (parent.height - self.height) * 0.9;
            clicked => {
                root.files = [];
                root.directory = "";
                confirm-button.is-applying = false;
                self.visible = false;
            }
        }

        progress := ProgressIndicator {
            visible: false;
            x: (parent.width - self.width) * 0.5;
            y: (parent.height - self.height) * 0.9;
            min-width: 160px;
            indeterminate: true;
        }
    }
}
